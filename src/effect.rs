use Effect::*;
use enumset::EnumSetType;
use nalgebra::Vector2;

/// An effect given by a drug
#[derive(EnumSetType, Debug, Hash)]
pub enum Effect {
    AntiGravity,
    Athletic,
    Balding,
    BrightEyed,
    Calming,
    CalorieDense,
    Cyclopean,
    Disorienting,
    Electrifying,
    Energizing,
    Euphoric,
    Explosive,
    Focused,
    Foggy,
    Gingeritis,
    Glowing,
    Jennerising,
    Laxative,
    LongFaced,
    Munchies,
    Paranoia,
    Refreshing,
    Schizophrenia,
    Sedating,
    SeizureInducing,
    Shrinking,
    Slippery,
    Smelly,
    Sneaky,
    Spicy,
    ThoughtProvoking,
    Toxic,
    TropicThunder,
    Zombifying,
}

impl Effect {
    pub const ALL: &'static [Self] = &[
        AntiGravity,
        Athletic,
        Balding,
        BrightEyed,
        Calming,
        CalorieDense,
        Cyclopean,
        Disorienting,
        Electrifying,
        Energizing,
        Euphoric,
        Explosive,
        Focused,
        Foggy,
        Gingeritis,
        Glowing,
        Jennerising,
        Laxative,
        LongFaced,
        Munchies,
        Paranoia,
        Refreshing,
        Schizophrenia,
        Sedating,
        SeizureInducing,
        Shrinking,
        Slippery,
        Smelly,
        Sneaky,
        Spicy,
        ThoughtProvoking,
        Toxic,
        TropicThunder,
        Zombifying,
    ];

    /// Returns the price modifier of this `Effect`.
    pub fn price_modifier(&self) -> f32 {
        match self {
            AntiGravity => 0.54,
            Athletic => 0.32,
            Balding => 0.3,
            BrightEyed => 0.4,
            Calming => 0.1,
            CalorieDense => 0.28,
            Cyclopean => 0.56,
            Disorienting => 0.0,
            Electrifying => 0.5,
            Energizing => 0.22,
            Euphoric => 0.18,
            Explosive => 0.0,
            Focused => 0.16,
            Foggy => 0.38,
            Gingeritis => 0.2,
            Glowing => 0.48,
            Jennerising => 0.42,
            Laxative => 0.0,
            LongFaced => 0.52,
            Munchies => 0.12,
            Paranoia => 0.0,
            Refreshing => 0.14,
            Schizophrenia => 0.0,
            Sedating => 0.26,
            SeizureInducing => 0.0,
            Shrinking => 0.6,
            Slippery => 0.34,
            Smelly => 0.0,
            Sneaky => 0.24,
            Spicy => 0.38,
            ThoughtProvoking => 0.44,
            Toxic => 0.0,
            TropicThunder => 0.46,
            Zombifying => 0.58,
        }
    }

    /// Returns the addictiveness modifier of this `Effect`.
    pub fn addictiveness(&self) -> f32 {
        match self {
            AntiGravity => 0.611,
            Athletic => 0.607,
            Balding => 0.0,
            BrightEyed => 0.2,
            Calming => 0.0,
            CalorieDense => 0.1,
            Cyclopean => 0.1,
            Disorienting => 0.0,
            Electrifying => 0.235,
            Energizing => 0.34,
            Euphoric => 0.235,
            Explosive => 0.0,
            Focused => 0.104,
            Foggy => 0.1,
            Gingeritis => 0.0,
            Glowing => 0.472,
            Jennerising => 0.343,
            Laxative => 0.1,
            LongFaced => 0.607,
            Munchies => 0.096,
            Paranoia => 0.0,
            Refreshing => 0.104,
            Schizophrenia => 0.0,
            Sedating => 0.0,
            SeizureInducing => 0.0,
            Shrinking => 0.336,
            Slippery => 0.309,
            Smelly => 0.0,
            Sneaky => 0.327,
            Spicy => 0.655,
            ThoughtProvoking => 0.37,
            Toxic => 0.0,
            TropicThunder => 0.803,
            Zombifying => 0.598,
        }
    }

    /// Returns the position of this `Effect` on the mix map.
    pub fn mix_map_postion(&self) -> Vector2<f32> {
        Vector2::from(match self {
            AntiGravity => [0.96, -2.96],
            Athletic => [-2.23, -0.58],
            Balding => [-0.14, -2.99],
            BrightEyed => [3.03, -0.04],
            Calming => [1.03, 0.02],
            CalorieDense => [1.11, 1.15],
            Cyclopean => [-1.51, 2.47],
            Disorienting => [-0.59, 2.06],
            Electrifying => [-3.05, 1.31],
            Energizing => [-2.14, 0.57],
            Euphoric => [0.0, 1.07],
            Explosive => [2.38, 2.6],
            Focused => [-1.04, 0.05],
            Foggy => [0.51, 2.22],
            Gingeritis => [-0.592, -2.0],
            Glowing => [1.4, 2.59],
            Jennerising => [-1.45, -3.05],
            Laxative => [-2.07, 1.53],
            LongFaced => [-0.2, 2.93],
            Munchies => [0.03, -1.03],
            Paranoia => [-1.16, -1.06],
            Refreshing => [-1.13, 1.14],
            Schizophrenia => [2.27, -2.71],
            Sedating => [2.1, -0.4],
            SeizureInducing => [-1.67, -2.09],
            Shrinking => [-3.26, -0.89],
            Slippery => [2.04, -1.66],
            Smelly => [1.27, -1.12],
            Sneaky => [0.77, -1.97],
            Spicy => [1.99, 1.75],
            ThoughtProvoking => [-2.62, -1.54],
            Toxic => [2.21, 0.69],
            TropicThunder => [3.0, -1.13],
            Zombifying => [2.96, 1.17],
        })
    }

    /// Returns the direction that this `Effect` modifies other effects.
    pub fn mix_direction(&self) -> nalgebra::Vector2<f32> {
        Vector2::from(match self {
            AntiGravity => [0.3085, -0.9512],
            Athletic => [-0.9678, -0.2517],
            Balding => [-0.0468, -0.9989],
            BrightEyed => [0.9999, -0.0132],
            Calming => [0.9998, 0.0194],
            CalorieDense => [0.6945, 0.7195],
            Cyclopean => [-0.5216, 0.8532],
            Disorienting => [-0.2753, 0.9613],
            Electrifying => [-0.9188, 0.3946],
            Energizing => [-0.9663, 0.2574],
            Euphoric => [0.0, 1.0],
            Explosive => [0.6752, 0.7376],
            Focused => [-0.9988, 0.048],
            Foggy => [0.2239, 0.9746],
            Gingeritis => [-0.2838, -0.9589],
            Glowing => [0.4755, 0.8797],
            Jennerising => [-0.4294, -0.9031],
            Laxative => [-0.8042, 0.5944],
            LongFaced => [-0.0681, 0.9977],
            Munchies => [0.0291, -0.9996],
            Paranoia => [-0.7382, -0.6746],
            Refreshing => [-0.704, 0.7102],
            Schizophrenia => [0.6421, -0.7666],
            Sedating => [0.9823, -0.1871],
            SeizureInducing => [-0.6242, -0.7812],
            Shrinking => [-0.9647, -0.2634],
            Slippery => [0.7756, -0.6312],
            Smelly => [0.75, -0.6614],
            Sneaky => [0.364, -0.9314],
            Spicy => [0.7509, 0.6604],
            ThoughtProvoking => [-0.8621, -0.5067],
            Toxic => [0.9546, 0.298],
            TropicThunder => [0.9358, -0.3525],
            Zombifying => [0.93, 0.3676],
        })
    }

    /// Returns the magnitude of the direction that this `Effect` modifies other effects.
    pub fn mix_magnitude(&self) -> f32 {
        match self {
            AntiGravity => 3.1118,
            Athletic => 2.3042,
            Balding => 2.9933,
            BrightEyed => 3.0303,
            Calming => 1.0302,
            CalorieDense => 1.5983,
            Cyclopean => 2.895,
            Disorienting => 2.1428,
            Electrifying => 3.3194,
            Energizing => 2.2146,
            Euphoric => 1.07,
            Explosive => 3.5248,
            Focused => 1.0412,
            Foggy => 2.2778,
            Gingeritis => 2.0858,
            Glowing => 2.9442,
            Jennerising => 3.3771,
            Laxative => 2.5741,
            LongFaced => 2.9368,
            Munchies => 1.0304,
            Paranoia => 1.5714,
            Refreshing => 1.6051,
            Schizophrenia => 3.5351,
            Sedating => 2.1378,
            SeizureInducing => 2.6753,
            Shrinking => 3.3793,
            Slippery => 2.6301,
            Smelly => 1.6933,
            Sneaky => 2.1151,
            Spicy => 2.65,
            ThoughtProvoking => 3.0391,
            Toxic => 2.3152,
            TropicThunder => 3.2058,
            Zombifying => 3.1828,
        }
    }
}

impl std::fmt::Display for Effect {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            AntiGravity => String::from("AntiGravity"),
            Athletic => String::from("Athletic"),
            Balding => String::from("Balding"),
            BrightEyed => String::from("BrightEyed"),
            Calming => String::from("Calming"),
            CalorieDense => String::from("CalorieDense"),
            Cyclopean => String::from("Cyclopean"),
            Disorienting => String::from("Disorienting"),
            Electrifying => String::from("Electrifying"),
            Energizing => String::from("Energizing"),
            Euphoric => String::from("Euphoric"),
            Explosive => String::from("Explosive"),
            Focused => String::from("Focused"),
            Foggy => String::from("Foggy"),
            Gingeritis => String::from("Gingeritis"),
            Glowing => String::from("Glowing"),
            Jennerising => String::from("Jennerising"),
            Laxative => String::from("Laxative"),
            LongFaced => String::from("LongFaced"),
            Munchies => String::from("Munchies"),
            Paranoia => String::from("Paranoia"),
            Refreshing => String::from("Refreshing"),
            Schizophrenia => String::from("Schizophrenia"),
            Sedating => String::from("Sedating"),
            SeizureInducing => String::from("SeizureInducing"),
            Shrinking => String::from("Shrinking"),
            Slippery => String::from("Slippery"),
            Smelly => String::from("Smelly"),
            Sneaky => String::from("Sneaky"),
            Spicy => String::from("Spicy"),
            ThoughtProvoking => String::from("ThoughtProvoking"),
            Toxic => String::from("Toxic"),
            TropicThunder => String::from("TropicThunder"),
            Zombifying => String::from("Zombifying"),
        };
        write!(f, "{s}")
    }
}

/// Calculates the sum of several effects' price modifiers.
pub fn get_total_price_modifier<I: IntoIterator<Item = Effect>>(effects: I) -> f32 {
    effects.into_iter().map(|e| e.price_modifier()).sum()
}

/// Calculates the sum of several effects' addictiveness modifiers.
pub fn get_total_addictiveness<I: IntoIterator<Item = Effect>>(effects: I) -> f32 {
    effects.into_iter().map(|e| e.addictiveness()).sum()
}
